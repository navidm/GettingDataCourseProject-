inverse <<- NULL
}
get <- function() x
setinverse <- function(i) inverse <<- i
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
if (!is.null(inverse)){
print("getting cached data")
return(inverse)
data <- x$get()
inverse<- solve(data)
x$setinverse(inverse)
inverse
}
}
bb <- makeCacheMatrix
mat <- matrix(1:4, ncol=2, nrow=2)
mat
bb <- makeCacheMatrix(mat)
cacheSolve(bb)
makeCacheMatrix <- function(x = matrix()) {
inverse <<- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(i) inverse <<- i
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
bb <- makeCacheMatrix(mat)
cacheSolve(bb)
inverse
source('~/.active-rstudio-document')
cacheSolve(bb)
bb
mat
in.null(x)
is.null(x)
x
mat
is.null(mat)
x <- matrix()
is.null(x)
b
b <-NULL
b
is.null(b)
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
list(set = set1, get = get,
setinverse = setinverse,
getinverse = getinverse)
list(set = set1, get = get,
setinverse = setinverse,
getinverse = getinverse)
f <- c(1:4)
class(f)
bb <- makeCacheMatrix(f)
bb
inverse
cacheSolve(f)
cacheSolve(mat)
inverse
source('~/.active-rstudio-document')
cacheSolve(mat)
debugSource('/Users/Coursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
if (!is.null(inverse)){
print("getting cached data")
return(inverse)}
data <- x$get()
inverse<- solve(data)
x$setinverse(inverse)
inverse
}
cacheSolve(mat)
cacheSolve(bb)
bb <- matrix(1:4, nrow=2, ncol=2)
cacheSolve(bb)
mat <- matrix(1:4, nrow=2, ncol=2)
bb <- makeCacheMatrix(mat)
cacheSolve(bb)
make.names("dd", unique=TRUE)
make.names(c("dd","dd","cc", unique=TRUE)
)
make.names(c("dd","dd","cc"), unique=TRUE)
setwd("./Users/Coursera/GetData Assignment")
setwd("/Users/Coursera/GetData Assignment")
testData <- read.table("./test/X_test.txt", header = FALSE)
dim(testData)
Head(testData)
head(testData)
featureNames <- read.table("./features.txt", header = FALSE)
dim(featurenames)
dim(featureNames)
class(featurenames)
class(featureNames)
dim(trainData)
dim(trainLabels)
trainData <- read.table("./train/X_train.txt", header = FALSE)
trainLabels <- read.table("./train/Y_train.txt", header = FALSE)
testLabels <- read.table("./test/Y_test.txt", header = FALSE)
testData <- cbind(testlabels,testData)
testData <- cbind(testLabels,testData)
dim(testData)
testData <- rbind(featureNames,testData)
testData <- read.table("./test/X_test.txt", header = FALSE)
testData <- rbind(featureNames,testData)
colnames(testLabels)
name(testLables)[1] <- paste("hello")
name(testLabels)[1] <- paste("hello")
names(testLabels)[1] <- paste("hello")
colnames(testLabels)
head(testLabels)
testLabels <- read.table("./test/Y_test.txt", header = FALSE)
testData  <- cbind(testLabels,testData)
trainData <- cbind(trainLabels,trainData)
combinedDS <- rbind(testData , trainData )
dim(combinedDS)
length(combinedDS)
class(featureNames)
featureNames[1]
featureNames[1,1]
featureNames[1,2]
featureNames[1,2]
featureNames[2,2]
featureNames[2]
head(featureNames)
featureNames$V2[1]
featureNames$V2
a <-featureNames$V2
class(a)
a[1]
a[2]
featureNames$V2[1]
featureNames$V2[1] <- "jj"
featureNames$V2[1]
featureNames$V2[1] <- 12
as.character(a)
a <- as.character(a)
a[1]
featureNames <- read.table("./features.txt", header = FALSE)
# Reading feature names
featureNames <- read.table("./features.txt", header = FALSE)
# Adding labels to datasets
testData  <- cbind(testLabels,testData)
trainData <- cbind(trainLabels,trainData)
# Creating a combined dataset
combinedDS <- rbind(testData , trainData )
# Assigning variable names to the dataset. note that we start from 2 to skip
# the label names.
colNames <- featureNames$V2
colNames <- as.character(colNames)
for(i in 2:length(combineDS)){
names(combineDS)[i] <- paste("colNames[i-1]")
}
# Reading feature names
featureNames <- read.table("./features.txt", header = FALSE)
# Adding labels to datasets
testData  <- cbind(testLabels,testData)
trainData <- cbind(trainLabels,trainData)
# Creating a combined dataset
combinedDS <- rbind(testData , trainData )
# Assigning variable names to the dataset. note that we start from 2 to skip
# the label names.
colNames <- featureNames$V2
colNames <- as.character(colNames)
for(i in 2:length(combineDS)){
names(combinedDS)[i] <- paste("colNames[i-1]")
}
# Reading feature names
featureNames <- read.table("./features.txt", header = FALSE)
# Adding labels to datasets
testData  <- cbind(testLabels,testData)
trainData <- cbind(trainLabels,trainData)
# Creating a combined dataset
combinedDS <- rbind(testData , trainData )
# Assigning variable names to the dataset. note that we start from 2 to skip
# the label names.
colNames <- featureNames$V2
colNames <- as.character(colNames)
for(i in 2:length(combinedDS)){
names(combinedDS)[i] <- paste("colNames[i-1]")
}
head(combinedDS)
# Setting working directory to the project forlder
setwd("/Users/Coursera/GetData Assignment")
# Reading Test dataset
testData <- read.table("./test/X_test.txt", header = FALSE)
testLabels <- read.table("./test/Y_test.txt", header = FALSE)
# Reading Train dataset
trainData <- read.table("./train/X_train.txt", header = FALSE)
trainLabels <- read.table("./train/Y_train.txt", header = FALSE)
# Reading feature names
featureNames <- read.table("./features.txt", header = FALSE)
# Adding labels to datasets
testData  <- cbind(testLabels,testData)
trainData <- cbind(trainLabels,trainData)
# Creating a combined dataset
combinedDS <- rbind(testData , trainData )
# Assigning variable names to the dataset. note that we start from 2 to skip
# the label names.
colNames <- featureNames$V2
colNames <- as.character(colNames)
for(i in 2:length(combinedDS)){
names(combinedDS)[i] <- paste(colNames[i-1])
}
dim(combinedDS)
names(combinedDS)
head(combinedDS)
names(combinedDS)[1] <- paste("SubjectID")
swirl()
library(swirl)
swirl()
mydf <- read.csv("path2csv",stringsAsFactors = FALSE )
mydf <- read.csv(path2csv,stringsAsFactors = FALSE )
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
tbl_df
cran
exit
bye
swirl()
?select
select(cran, ip_id, package, country)
5:20
select(cran,
| r_arch:country)
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(-(x:size))
select(cran,-(x:size))
select(cran,-(X:size))
swirl()
filter(cran, package == "swirl")
exit
date
grep()
?grep
grep()
a
grep(a,"angle")
grep("angle",a)
grep("mean",a)
grep("mean" | "std",a)
grep("mean" ,"std",a)
grep("mean" ,a)
b <- grep("mean" ,a)
exit
bye
q
quit
exit()
ee
b <- grep("mean" ,a)
?
)
swirl()
bye()
b <- grep("mean" ,a)
a[b]
b <- grep("mean" ,a)
b<- rbind(b,grep("std",a))
b<- c(b,grep("std",a))
b
b <- grep("mean" ,featureNames)
b
featureName
featureNames
vNames <- featureName$V2
vNames <- featureNames$V2
b <- grep("mean" ,vNames)
b
b <- c(b,grep("std" ,vNames))
b
b <- grep("mean" ,combinedDS)
b
select ()
v <- c(1,3,5)
select(combinedDS, v)
select(combinedDS, 1)
select(unique(combinedDS), 1)
selectnedDS, 1)
class(combinedDS)
testData
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
df
select(df, 1)
select(df, c(1,3))
extMeasureDS <- select(combinedDS,b)
head(combinedDS)
b
vNames <- featureNames$V2
b <- grep("mean" ,vNames)
b <- c(b,grep("std" ,vNames))
extMeasureDS <- select(combinedDS,b)
b
length(b)
length(unique(b)
)
extMeasureDS <- select(combinedDS,1)
make.names(featureNames, unique=TRUE)
featureNames <- read.table("./features.txt", header = FALSE)
featureNames
make.names(colNames , unique=TRUE)
colNames <- featureNames$V2
colNames <- as.character(colNames)
# There are duplicate (similar) feature names. The code bellow add a suffix to
# them to make them unique
colNames <- make.names(colNames , unique=TRUE)
names(combinedDS)[1] <- paste("SubjectID")
for(i in 2:length(combinedDS)){
names(combinedDS)[i] <- paste(colNames[i-1])
}
#Finding "Mean" and "Standard deviation" variables
vNames <- featureNames$V2
b <- grep("mean" ,vNames)
b <- c(b,grep("std" ,vNames))
combinedDS <- rbind(testData , trainData )
# Assigning variable names to the dataset. note that we start from 2 to skip
# the label names.
colNames <- featureNames$V2
colNames <- as.character(colNames)
# There are duplicate (similar) feature names. The code bellow add a suffix to
# them to make them unique
colNames <- make.names(colNames , unique=TRUE)
names(combinedDS)[1] <- paste("SubjectID")
for(i in 2:length(combinedDS)){
names(combinedDS)[i] <- paste(colNames[i-1])
}
#Finding "Mean" and "Standard deviation" variables
vNames <- featureNames$V2
b <- grep("mean" ,vNames)
b <- c(b,grep("std" ,vNames))
extMeasureDS <- select(combinedDS,b)
dim(extMeasureDS)
dim(combinedDS)
extMeasureDS <- select(combinedDS,b+1)
names(extMeasureDS)
dim(extMeasureDS)
extMeasureDS <- select(combinedDS,b)
names(extMeasureDS)
extMeasureDS <- select(combinedDS,b+1)
extMeasureDS
names(extMeasureDS)
featureNames
names(extMeasureDS)
# Adding labels to datasets
testData  <- cbind(testLabels,testData)
trainData <- cbind(trainLabels,trainData)
# Creating a combined dataset
combinedDS <- rbind(testData , trainData )
# Assigning variable names to the dataset. note that we start from 2 to skip
# the label names which contains subject id.
colNames <- featureNames$V2
colNames <- as.character(colNames)
# There are duplicate (similar) feature names. The code bellow add a suffix to
# them to make them unique
colNames <- make.names(colNames , unique=TRUE)
names(combinedDS)[1] <- paste("SubjectID")
for(i in 2:length(combinedDS)){
names(combinedDS)[i] <- paste(colNames[i-1])
}
#Finding "Mean" and "Standard deviation" variables. Here we find the column
# numbers and select those columns from the data set
vNames <- featureNames$V2
b <- grep("mean" ,vNames)
b <- c(b,grep("Mean" ,vNames))
b <- c(b,grep("std" ,vNames))
# Remember we added the first column (subject id) therefore we have to add 1
# to column numbers
extMeasureDS <- select(combinedDS, b+1)
names(extMeasureDS)
# Setting working directory to the project forlder
setwd("/Users/Coursera/GetData Assignment")
# Reading Test dataset
testData <- read.table("./test/X_test.txt", header = FALSE)
testLabels <- read.table("./test/Y_test.txt", header = FALSE)
testSubjects <- read.table("./test/subject_test.txt", header = FALSE)
# Reading Train dataset
trainData <- read.table("./train/X_train.txt", header = FALSE)
trainLabels <- read.table("./train/Y_train.txt", header = FALSE)
trainSubjects <- read.table("./train/subject_train.txt", header = FALSE)
# Reading feature names
featureNames <- read.table("./features.txt", header = FALSE)
# Adding labels and subjects to datasets
testData  <- cbind(testLabels,testData)
testData  <- cbind(testSubjects,testData)
trainData <- cbind(trainLabels,trainData)
trainData <- cbind(trainSubjects,trainData)
# Creating a combined dataset
combinedDS <- rbind(testData , trainData )
# Assigning variable names to the dataset. note that we start from 2 to skip
# the label names which contains subject id.
colNames <- featureNames$V2
colNames <- as.character(colNames)
# There are duplicate (similar) feature names. The code bellow add a suffix to
# them to make them unique
colNames <- make.names(colNames , unique=TRUE)
names(combinedDS)[1] <- paste("subjectID")
names(combinedDS)[1] <- paste("activityID")
for(i in 2:length(combinedDS)){
names(combinedDS)[i] <- paste(colNames[i-1])
}
#Finding "Mean" and "Standard deviation" variables. Here we find the column
# numbers and select those columns from the data set
vNames <- featureNames$V2
b <- grep("mean" ,vNames)
b <- c(b,grep("Mean" ,vNames))
b <- c(b,grep("std" ,vNames))
# Remember we added the first column (subject id) therefore we have to add 1
# to column numbers
extMeasureDS <- select(combinedDS, b+1)
names(extMeasureDS)
# Setting working directory to the project forlder
setwd("/Users/Coursera/GetData Assignment")
# Reading Test dataset
testData <- read.table("./test/X_test.txt", header = FALSE)
testLabels <- read.table("./test/Y_test.txt", header = FALSE)
testSubjects <- read.table("./test/subject_test.txt", header = FALSE)
# Reading Train dataset
trainData <- read.table("./train/X_train.txt", header = FALSE)
trainLabels <- read.table("./train/Y_train.txt", header = FALSE)
trainSubjects <- read.table("./train/subject_train.txt", header = FALSE)
# Reading feature names
featureNames <- read.table("./features.txt", header = FALSE)
# Adding labels and subjects to datasets
testData  <- cbind(testLabels,testData)
testData  <- cbind(testSubjects,testData)
trainData <- cbind(trainLabels,trainData)
trainData <- cbind(trainSubjects,trainData)
# Creating a combined dataset
combinedDS <- rbind(testData , trainData )
# Assigning variable names to the dataset. note that we start from 2 to skip
# the label names which contains subject id.
colNames <- featureNames$V2
colNames <- as.character(colNames)
# There are duplicate (similar) feature names. The code bellow add a suffix to
# them to make them unique
colNames <- make.names(colNames , unique=TRUE)
names(combinedDS)[1] <- paste("subjectID")
names(combinedDS)[2] <- paste("activityID")
for(i in 3:length(combinedDS)){
names(combinedDS)[i] <- paste(colNames[i-2])
}
#Finding "Mean" and "Standard deviation" variables. Here we find the column
# numbers and select those columns from the data set
vNames <- featureNames$V2
b <- grep("mean" ,vNames)
b <- c(b,grep("Mean" ,vNames))
b <- c(b,grep("std" ,vNames))
# Remember we added the first column (subject id) therefore we have to add 1
# to column numbers
extMeasureDS <- select(combinedDS, b+2)
names(1)
names(extMeasureDS)
combinedDS <- rbind(testData , trainData )
# Assigning variable names to the dataset. note that we start from 2 to skip
# the label names which contains subject id.
colNames <- featureNames$V2
colNames <- as.character(colNames)
# There are duplicate (similar) feature names. The code bellow add a suffix to
# them to make them unique
colNames <- make.names(colNames , unique=TRUE)
names(combinedDS)[1] <- paste("subjectID")
names(combinedDS)[2] <- paste("activityID")
for(i in 3:length(combinedDS)){
names(combinedDS)[i] <- paste(colNames[i-2])
}
#Finding "Mean" and "Standard deviation" variables. Here we find the column
# numbers and select those columns from the data set
vNames <- featureNames$V2
b <- grep("mean" ,vNames)
b <- c(b,grep("Mean" ,vNames))
b <- c(b,grep("std" ,vNames))
# Remember we added the first column (subject id) therefore we have to add 1
# to column numbers
extMeasureDS <- select(combinedDS, 1,2, b+2)
names(extMeasureDS)
head(extMeasureDS[2,])
head(extMeasureDS[,2])
extMeasureDS[,2]
a <- sapply(extMeasureDS[2,], gsub(1, "walking"))
a <- sapply(extMeasureDS[2,], gsub, 1, "walking")
a
extMeasureDS[2,]
a <- sapply(extMeasureDS[,2], gsub, 1, "walking")
a
